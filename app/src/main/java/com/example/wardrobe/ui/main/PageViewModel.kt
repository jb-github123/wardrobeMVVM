package com.example.wardrobe.ui.main

import android.app.Application
import android.util.Base64
import android.util.Log
import androidx.lifecycle.*
import com.example.wardrobe.config.DEBUG_ON
import com.example.wardrobe.database.model.Shirt
import com.example.wardrobe.database.model.Trouser
import com.example.wardrobe.repository.Repository
import kotlinx.coroutines.launch
import java.io.*

class PageViewModel(application: Application) : AndroidViewModel(application) {

    private val mRepository: Repository = Repository(application)

    // private var shirtList: LiveData<List<Shirt>> = mRepository.getShirtList()
    // private var trouserList: LiveData<List<Trouser>> = mRepository.getTrouserList()

    // toggle flag to return random shirts and trousers
    val doShuffle = MutableLiveData<Boolean>(false)
    val shirtImageCount = MutableLiveData<Int>(0)
    private val shirtList: ArrayList<Shirt> = ArrayList()
    private val trouserList: ArrayList<Trouser> = ArrayList()

    /*Transformations.map(_imageListArray) {
        it
    }*/

    /*val image: LiveData<String> = Transformations.map(_image) {
        it
    }*/

    /* functions related to shirt */
    fun loadShirtImageList(): LiveData<List<Shirt>> {
        // replace implementation to get data from db
        // _shirtList.value?.clear()
        // val list = ArrayList<Shirt>()
        // list.add(Shirt(1, ""))
        // list.add(Shirt("2",""))
        val list = doShuffle.switchMap { doShuffle ->
            if(doShuffle){
                mRepository.getRandomShirtList()
            } else {
                mRepository.getShirtList()
            }
        }
        // shirtImageCount.value = list.value!!.size
        return list
    }

    fun setShirtList(list: List<Shirt>){
        shirtList.clear()
        shirtList.addAll(list)
    }

    fun getShirtList(): List<Shirt>{
        return shirtList
    }

    fun addShirtToList(shirt: Shirt){
        // val list = ArrayList<Shirt>()
        // list.add(Shirt(1, "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"))
        // list.add(shirt)
        // add insert query
        viewModelScope.launch {
            mRepository.addShirt(shirt)
        }
    }

    /*@Deprecated("to be removed")
    fun shuffleList(): LiveData<List<Shirt>> {
        // shirtList = shirtList.value.shuffled()
        return shirtList.switchMap { it ->
            mRepository.getRandomShirtList()
        }
        // shirtList = mRepository.getRandomShirtList()

        /*doShuffle.switchMap { _ ->
            mRepository.getRandomShirtList()
        }*/
        // doShuffle.value = false

        // get shuffled trouser list from db
    }*/

    /* functions related to trousers */
    fun loadTrouserImageList(): LiveData<List<Trouser>> {
        return doShuffle.switchMap { doShuffle ->
            if(doShuffle){
                mRepository.getRandomTrouserList()
            } else {
                mRepository.getTrouserList()
            }
        }
    }

    fun setTrouserList(list: List<Trouser>){
        trouserList.clear()
        trouserList.addAll(list)
    }

    fun getTrouserList(): List<Trouser>{
        return trouserList
    }

    fun addTrouserToList(trouser: Trouser){
        viewModelScope.launch {
            mRepository.addTrouser(trouser)
        }
    }

    // used by fragment to load an image for that fragment index
    fun getBase64ImageFromList(base64String: String, file: File) {
        //_shirt.value = shirtList.get(index)
        // val shirt = shirtList.value?.get(index)
        if(DEBUG_ON) Log.e("TESTVM", "base64String $base64String")

        if(base64String != null){
            val byteArray: ByteArray = Base64.decode(base64String, Base64.NO_WRAP)
            return getBase64DecodedFile(file, byteArray)
        }
    }

    /*fun getRandomShirtImageFromList(file: File) {
        // val randomIndex = Math.random() * 10
        _shirtList.value?.shuffle()
        _shirt.value = _shirtList.value?.get(0)

        val byteArray: ByteArray = Base64.decode(_shirt.value?.image, Base64.NO_WRAP)
        return getBase64DecodedFile(file, byteArray)
    }*/

    // decode file from db
    private fun getBase64DecodedFile(file: File, byteArray: ByteArray) {

        val fos: FileOutputStream
        try {
            fos = FileOutputStream(file)
        } catch (e: FileNotFoundException) {
            if (DEBUG_ON) e.printStackTrace()
            return
        }

        val buffer = BufferedOutputStream(fos)
        try {
            buffer.write(byteArray)
        } catch (ioException: IOException) {
            if (DEBUG_ON) ioException.printStackTrace()
            return
        } finally {
            try {
                buffer.close()
            } catch (ioException: IOException){
                if (DEBUG_ON) ioException.printStackTrace()
            }
        }
        return
    }

    // encode bitmap to send to db
    fun getBase64EncodedString(file: File): String {
        var base64EncodedImage = "error!"
        val fileByteArray: ByteArray

        val fis: FileInputStream
        try {
            fis = FileInputStream(file)
        } catch (e: FileNotFoundException) {
            if (DEBUG_ON) e.printStackTrace()
            return base64EncodedImage
        }

        val buffer = BufferedInputStream(fis)
        try {
            fileByteArray = buffer.readBytes()
        } catch (ioException: IOException) {
            if (DEBUG_ON) ioException.printStackTrace()
            return base64EncodedImage
        } finally {
            try {
                buffer.close()
            } catch (ioException: IOException){
                if (DEBUG_ON) ioException.printStackTrace()
            }
        }

        base64EncodedImage = Base64.encodeToString(fileByteArray, Base64.NO_WRAP)
        return base64EncodedImage
    }
}